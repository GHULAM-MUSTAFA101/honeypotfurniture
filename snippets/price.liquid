{%- liquid

  if use_variant
    assign target = product.selected_or_first_available_variant
  else
    assign target = product
  endif
  assign compare_at_price = target.compare_at_price
  assign price = target.price | default: 1999
  assign available = target.available | default: false
  assign money_price = price | money

  assign snap_apr = settings.snap_apr | times: 1.0
  assign snap_years = settings.snap_years
  assign snap_months = 12 | times: snap_years
  assign snap_weeks = 52 | times: snap_years
  assign snap_deposit = settings.snap_deposit | times: 1000

  assign unformatted_price = price
  assign amount_of_credit = unformatted_price | minus: snap_deposit | divided_by: 100

  assign money_price = money_price | remove: '.00' 
  if settings.currency_code_enabled
    assign money_price = price | money_with_currency
  endif
  if target == product and product.price_varies
    assign money_price = 'products.product.price.from_price_html' | t: price: money_price
  endif
-%}

<div
  class="
    price 
    {%- if settings.product_cards_style == 'card' %}{% unless main_price %} right{% endunless %}{% endif -%}
    {%- if price_class %} {{ price_class }}{% endif -%}
    {%- if available == false %} price--sold-out{% endif -%}
    {%- if compare_at_price > price %} price--on-sale{% endif -%}
    {%- if product.price_varies == false and product.compare_at_price_varies %} price--no-compare{% endif -%}
  "
>
  <div class="price__container d-flex v-a-top">
    <div class="price__regular">
      <span class="visually-hidden visually-hidden--inline">{{ 'products.product.price.regular_price' | t }}</span>
      <span
        class="
          price-item price-item--regular d-inline-block
          {%- unless product.price_varies == false and product.compare_at_price_varies %}
            {%- if compare_at_price != blank %} price-after--sale{%- endif -%}
          {%- endunless -%}
        "
        style="min-height:30px;"
      >
        {{ money_price }}
      </span>
    </div>
    <div class="price__sale">
      <span class="visually-hidden visually-hidden--inline">{{ 'products.product.price.sale_price' | t }}</span>
      <span class="price-item price-item--sale price-item--last d-inline-block">
        {{ money_price }}
      </span>
      {%- unless product.price_varies == false and product.compare_at_price_varies %}
        <span class="visually-hidden visually-hidden--inline">{{ 'products.product.price.regular_price' | t }}</span>
        <span class="was">Was</span>
        <span> 
          <s class="price-item price-item--regular d-inline-block{% if compare_at_price != blank %} price-before--sale{% endif %}">
            {% if settings.currency_code_enabled %}
              {{ compare_at_price | money_with_currency }}
            {% else %}
              {{ compare_at_price | money | remove: '.00' }}
            {% endif %}
          </s>
        </span>
      {%- endunless -%}
      {% render 'product-discounts', product: product, check_discount_price: true %}
    </div>
    <small class="unit-price caption d-block{% if product.selected_or_first_available_variant.unit_price_measurement == nil %} hidden{% endif %}">
      <span class="visually-hidden">{{ 'products.product.price.unit_price' | t }}</span>
      <span class="price-item price-item--last d-inline-block">
        <span>{{- product.selected_or_first_available_variant.unit_price | money -}}</span>
        <span aria-hidden="true">/</span>
        <span class="visually-hidden">&nbsp;{{ 'accessibility.unit_price_separator' | t }}&nbsp;</span>
        <span>
          {%- if product.selected_or_first_available_variant.unit_price_measurement.reference_value != 1 -%}
            {{- product.selected_or_first_available_variant.unit_price_measurement.reference_value -}}
          {%- endif -%}
          {{ product.selected_or_first_available_variant.unit_price_measurement.reference_unit }}
        </span>
      </span>
    </small>
    {%- if show_you_save -%}
      {%- if compare_at_price > price %}
        {%- liquid
          assign price_save = compare_at_price | minus: price
          assign price_save = price_save | money
        -%}
        <div class="price__caption d-block f-italic subrte">
          {{ 'products.product.price.you_save' | t: price: price_save }}
        </div>
      {%- endif -%}
    {%- endif -%}

    {%- if settings.enable_snap_collections == true %}
      {%- if template contains 'product' -%}
        {%- if price > 25000 -%}
          <div class="ml-2">
            <div
              class="monthly-payment"
              data-amount-of-credit="{{ amount_of_credit | json }}"
              data-snap-apr="{{ snap_apr | json }}"
              data-snap-months="{{ snap_months | json }}"
              data-snap-weeks="{{ snap_weeks | json }}"
            ></div>
          </div>
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}

  </div>

  {%- if settings.enable_snap_collections == true %}
    {%- if template contains 'product' -%}
      {%- if price > 25000 -%}
        <div class="monthly-payment-description">Over {{ snap_years }} years £{{ settings.snap_deposit }} deposit {{ snap_apr }}% apr</div>
      {%- endif -%}
    {%- endif -%}
  {%- endif -%}

</div>

{%- if settings.enable_snap_collections == true %}
  {%- if template contains 'product' -%}
    {%- if price > 25000 -%}
      <script>
        document.addEventListener('DOMContentLoaded', function () {
          var monthlyPaymentElements = document.querySelectorAll('.monthly-payment');
          
          // Calculated values
          var basePercentage = -0.017; // Base percentage
          var incrementPerHundred = -0.0011050; // Percentage increment per £1 increase
      
          monthlyPaymentElements.forEach(function (element) {
            var amountOfCredit = parseFloat(element.getAttribute('data-amount-of-credit'));
            var snapAPR = parseFloat(element.getAttribute('data-snap-apr'));
            var snapMonths = parseInt(element.getAttribute('data-snap-months'));
            var snapWeeks = parseInt(element.getAttribute('data-snap-weeks'));
      
            // Calculate weekly interest rate
            var weeklyInterestRate = snapAPR / 100 / 52; // Convert APR to a weekly rate
      
            // Calculate weekly payment using the formula
            var numerator = amountOfCredit * weeklyInterestRate * Math.pow(1 + weeklyInterestRate, snapWeeks);
            var denominator = Math.pow(1 + weeklyInterestRate, snapWeeks) - 1;
            var weeklyPayment = numerator / denominator;
      
            // Convert weekly payment to monthly payment
            var monthlyPayment = (weeklyPayment * snapWeeks) / snapMonths;
      
            // Calculate the percentage increase based on amountOfCredit
            var fixedPercentageIncrease = basePercentage + (Math.floor(amountOfCredit / 100) * incrementPerHundred);
      
            // Apply the percentage increase to the monthly payment
            monthlyPayment += monthlyPayment * fixedPercentageIncrease;
      
            // Round to two decimal places
            monthlyPayment = Math.round(monthlyPayment * 100) / 100;
      
            // Update the HTML content with the calculated monthly payment
            element.innerText = ' / £' + monthlyPayment.toFixed(2) + ' per month';
          });
        });
      </script>    
    {%- endif -%}
  {%- endif -%}
{%- endif -%}

<style>
  .swiper-wrapper .monthly-payment,
  .swiper-wrapper .monthly-payment-description {
    display: none;
  }
  .monthly-payment {
    font-size: 16px;
  }
  .monthly-payment-description {
    font-weight: 300;
    font-size: 12px;
    margin-top: -5px;
  }
  .price__container {
    display: flex;
    flex-wrap: wrap;
    min-height: 30px;
  }
</style>
