{% doc %}
  @prompt
    A heading centralised in the block. Underneath create 3  with the centre image sat forward. make the images on a carousel scroller, Make the image carousel infinite 
, Remove the dotes below the arrows
, Change the heading font to Lato Regular


{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-image-carousel-{{ ai_gen_id }} {
    padding: 40px 20px;
    text-align: center;}

  .ai-image-carousel-heading-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin-bottom: 30px;
    font-weight: {{ block.settings.heading_weight }};
    font-family: {{ block.settings.heading_font }}, sans-serif;
  }

  .ai-image-carousel-container-{{ ai_gen_id }} {
    position: relative;
    max-width: 100%;
    overflow: hidden;
    padding: 30px 0;
  }

  .ai-image-carousel-track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.5s ease;}

  .ai-image-carousel-slide-{{ ai_gen_id }} {
    flex: 0 0 calc(33.333% - 20px);
    margin: 0 10px;
    transition: all 0.3s ease;
    transform: scale(0.85);
    opacity: 0.7;
  }

  .ai-image-carousel-slide-{{ ai_gen_id }}.active {
    transform: scale(1);
    opacity: 1;
    z-index: 1;
  }

  .ai-image-carousel-image-wrapper-{{ ai_gen_id }} {
    width: 100%;
    height: 0;
    padding-bottom: {{ block.settings.image_aspect_ratio }}%;
    position: relative;
    overflow: hidden;border-radius: {{ block.settings.image_border_radius }}px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .ai-image-carousel-image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;}

  .ai-image-carousel-placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;}

  .ai-image-carousel-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
  }

  .ai-image-carousel-nav-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 20px;
  }

  .ai-image-carousel-button-{{ ai_gen_id }} {
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;}

  .ai-image-carousel-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  @media screen and (max-width: 749px) {
    .ai-image-carousel-slide-{{ ai_gen_id }} {
      flex: 0 0 calc(100% - 20px);
    }
  }
{% endstyle %}

<div id="{{ block.settings.anchor_id }}" class="ai-image-carousel-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  {% if block.settings.heading != blank %}
    <h2 class="ai-image-carousel-heading-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
  {% endif %}

  <carousel-component-{{ ai_gen_id }} class="ai-image-carousel-container-{{ ai_gen_id }}">
    <div class="ai-image-carousel-track-{{ ai_gen_id }}">
      {% for i in (1..4) %}
        {% assign image_setting = 'image_' | append: i %}
        <div class="ai-image-carousel-slide-{{ ai_gen_id }} {% if forloop.index == 2 %}active{% endif %}">
          <div class="ai-image-carousel-image-wrapper-{{ ai_gen_id }}">
            {% if block.settings[image_setting] != blank %}
              <img 
                src="{{ block.settings[image_setting] | image_url: width: 800 }}"
                alt="{{ block.settings[image_setting].alt | escape }}"
                class="ai-image-carousel-image-{{ ai_gen_id }}"
                loading="lazy"width="{{ block.settings[image_setting].width }}"
                height="{{ block.settings[image_setting].height }}"
              >
            {% else %}
              <div class="ai-image-carousel-placeholder-{{ ai_gen_id }}">
                {{ 'image' | placeholder_svg_tag }}
              </div>
            {% endif %}
          </div>
        </div>
      {% endfor %}
    </div>

    <div class="ai-image-carousel-nav-{{ ai_gen_id }}">
      <button class="ai-image-carousel-button-{{ ai_gen_id }} prev" aria-label="Previous slide">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
      </button>
      <button class="ai-image-carousel-button-{{ ai_gen_id }} next" aria-label="Next slide">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </button>
    </div>
  </carousel-component-{{ ai_gen_id }}>
</div>

<script>
  (function() {
    class CarouselComponent{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.track = this.querySelector('.ai-image-carousel-track-{{ ai_gen_id }}');
        this.slides = this.querySelectorAll('.ai-image-carousel-slide-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.ai-image-carousel-button-{{ ai_gen_id }}.prev');
        this.nextButton = this.querySelector('.ai-image-carousel-button-{{ ai_gen_id }}.next');
        this.currentIndex = 1; // Start with middle slide active
        this.slideCount = this.slides.length;
        this.isMobile = window.innerWidth <= 749;
        this.isTransitioning = false;}

      connectedCallback() {
        this.cloneSlides();
        this.updateCarousel();
        this.setupEventListeners();
      }

      cloneSlides() {
        // Clone first and last slides to create the infinite effect
        const firstSlideClone = this.slides[0].cloneNode(true);
        const lastSlideClone = this.slides[this.slideCount - 1].cloneNode(true);
        
        firstSlideClone.classList.remove('active');
        lastSlideClone.classList.remove('active');
        
        firstSlideClone.setAttribute('aria-hidden', 'true');
        lastSlideClone.setAttribute('aria-hidden', 'true');
        
        this.track.appendChild(firstSlideClone);
        this.track.insertBefore(lastSlideClone, this.slides[0]);
        // Update slides collection after cloning
        this.slides = this.querySelectorAll('.ai-image-carousel-slide-{{ ai_gen_id }}');
        this.slideCount = this.slides.length;
        
        // Adjust initial position to show the original first slide (now at index 1)
        this.currentIndex = 1;
      }

      setupEventListeners() {
        this.prevButton.addEventListener('click', () => this.navigate(-1));
        this.nextButton.addEventListener('click', () => this.navigate(1));

        window.addEventListener('resize', () => {
          const wasMobile = this.isMobile;
          this.isMobile = window.innerWidth <= 749;
          
          if (wasMobile !== this.isMobile) {
            this.updateCarousel(false);
          }
        });

        // Add transition end event to handle infinite scrolling
        this.track.addEventListener('transitionend', () => {
          this.handleTransitionEnd();
        });
      }

      navigate(direction) {
        if (this.isTransitioning) return;
        
        this.isTransitioning = true;
        this.currentIndex += direction;
        this.updateCarousel();
      }

      handleTransitionEnd() {
        this.isTransitioning = false;
        
        // If we've moved to the clone of the first slide (at the end)
        if (this.currentIndex >= this.slideCount - 1) {
          this.track.style.transition = 'none';
          this.currentIndex = 1; // Go to the real first slide
          this.updateCarousel(false);
          setTimeout(() => {
            this.track.style.transition = 'transform 0.5s ease';
          }, 10);
        }
        // If we've moved to the clone of the last slide (at the beginning)
        else if (this.currentIndex <= 0) {
          this.track.style.transition = 'none';
          this.currentIndex = this.slideCount - 2; // Go to the real last slide
          this.updateCarousel(false);
          setTimeout(() => {
            this.track.style.transition = 'transform 0.5s ease';
          }, 10);
        }
      }

      updateCarousel(animate = true) {
        if (animate) {
          this.track.style.transition = 'transform 0.5s ease';
        } else {
          this.track.style.transition = 'none';
        }

        // Update active class for visual slides (not clones)
        this.slides.forEach((slide, index) => {
          if (index > 0 && index < this.slideCount - 1) {
            slide.classList.toggle('active', index === this.currentIndex);
          } else {
            slide.classList.remove('active');
          }
        });

        // Calculate transform
        let translateX;
        if (this.isMobile) {
          translateX = -this.currentIndex * 100;
        } else {
          // For desktop, center the active slide
          translateX = -(this.currentIndex * 33.333) + 33.333;
        }
        
        this.track.style.transform = `translateX(${translateX}%)`;
      }
    }

    customElements.define('carousel-component-{{ ai_gen_id }}', CarouselComponent{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Image Carousel",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Heading"
    },
    {
      "type": "text",
      "id": "anchor_id",
      "label": "Anchor ID"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading text",
      "default": "Featured Images"
    },
    {
      "type": "select",
      "id": "heading_font",
      "label": "Heading font",
      "options": [
        {
          "value": "Lato",
          "label": "Lato"
        },
        {
          "value": "Roboto",
          "label": "Roboto"
        },
        {
          "value": "Open Sans",
          "label": "Open Sans"
        },
        {
          "value": "Montserrat",
          "label": "Montserrat"
        },
        {
          "value": "Playfair Display",
          "label": "Playfair Display"
        }
      ],
      "default": "Lato"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 16,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 32
    },
    {
      "type": "select",
      "id": "heading_weight",
      "label": "Heading weight",
      "options": [
        {
          "value": "normal",
          "label": "Regular"
        },
        {
          "value": "bold",
          "label": "Bold"
        }
      ],
      "default": "normal"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Images"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "Image 1"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "Image 2"
    },
    {
      "type": "image_picker",
      "id": "image_3",
      "label": "Image 3"
    },
    {
      "type": "image_picker",
      "id": "image_4",
      "label": "Image 4"
    },
    {
      "type": "range",
      "id": "image_aspect_ratio",
      "min": 50,
      "max": 150,
      "step": 5,
      "unit": "%",
      "label": "Image aspect ratio",
      "default": 100
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Image border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#333333"
    }
  ],
  "presets": [
    {
      "name": "Image Carousel"
    }
  ]
}
{% endschema %}